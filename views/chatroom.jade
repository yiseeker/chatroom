doctype html
html
    head
        title=title
        link(href='/stylesheets/bootstrap.css',type='text/css',rel='stylesheet')
        script(src='/javascripts/jquery.js')
        script(src='/javascripts/bootstrap.js')
        script(src='/javascripts/socket.io.js')
        script(src='/javascripts/adapter.js')

    body
        form
            div.container#container
                div.row
                    div.col-md-2.col-sm-12
                        h3 [Room Name]:
                    div.col-md-2.col-sm-12
                        h4#roomName
                    div.col-md-2.col-sm-12
                        h3 [SocketID]:
                    div.col-md-2.col-sm-12
                        h4#SOCKETID
                br
                div.row
                    div.col-md-12.col-sm-12
                        label local video
                    div.col-md-12.col-sm-12
                        video#localVideo(autoplay='autoplay')

    script.
        var list=new Array();
        var socket=io();
        var room=prompt('enter room name:');
        $('#roomName').html(room);
        var socketid;
        var localStream;
        Array.prototype.Remove = function (val) {
            var index = -1;
            for (var i in list) {
                if (list[i].id == val) {
                    index = i;
                    break;
                }
            }
            if (index > -1) {
                this.splice(index, 1);
            }
        };

        //Initialize socket.io
        socket.on('_join',function(socketId){
            CreatePeer(socketId);
            SendOffer(socketId);
        });

        //Get self socket ID
        socket.on('_getSocketId',function(socid){
            socketid=socid;
            document.getElementById('SOCKETID').innerText=socid;
        });

        //Get the list of all other online client
        socket.on('_getOnlineLists',function(clientInRoom){
            for(var i in clientInRoom){
                if(typeof(clientInRoom[i].socketid)!='undefined')
                {
                    CreatePeer(clientInRoom[i].socketid);
                }
            }
        });

        //When user is offline, you have to remove it from local client list and
        //remove the video node from the html DOM tree.
        socket.on('_offline',function(data){
            RemoveNodeBySocketId(data);
            list.Remove(data);
            Traversal();
            console.log('[User leaves] : '+data);
        });

        socket.on('_message',function(msg){
            if(msg.type=='offer')
            {
                var peer=GetRTCPeerConnectionBySocketId(msg.from);
                peer.setRemoteDescription(new RTCSessionDescription(msg.data),function()
                {
                    console.log('setRemoteDescription succeed, remote socketID='+msg.from);
                },function(error){
                    console.log('setRemoteDescription error, remote socketID='+msg.from+', error='+error);
                });
                peer.createAnswer(function(description){
                    peer.setLocalDescription(description);
                    var message={type:'answer',from:socketid,to:msg.from,data:description};
                    send(message);
                },function(error){
                    console.log('setRemoteDescription error, remote socketID='+msg.from+', error='+error);
                });
            }
            else if(msg.type=='answer')
            {
                var peer=GetRTCPeerConnectionBySocketId(msg.from);
                peer.setRemoteDescription(new RTCSessionDescription(msg.data),function()
                {
                    console.log('setRemoteDescription succeed, remote socketID='+msg.from);
                },function(error){
                    console.log('setRemoteDescription error, remote socketID='+msg.from+', error='+error);
                });
            }else if(msg.type=='candidate')
            {
                var peer=GetRTCPeerConnectionBySocketId(msg.from);
                if(msg.data!=null)
                {
                    peer.addIceCandidate(new RTCIceCandidate(msg.data));
                }
            }
        });




        //******************************************************************************************
        //methods
        function CreatePeer(socketId)
        {
            //create pc and set up event handler
            var pc=new RTCPeerConnection(null);
            pc.sid=socketId;
            pc.addStream(localStream);
            pc.onaddstream=function(event){
                attachMediaStream(document.getElementById('video_'+this.sid),event.stream);
            };
            pc.onicecandidate=function(event){
                var message={type:'candidate',from:socketid,to:null,data:event.candidate};
                send(message);
                //console.log('CANDIDATE INFO: '+JSON.stringify(event.candidate));
            };

            //put the new comer to the online list
            var client={id:socketId,connection:pc};
            list.push(client);

            //append a new video object to the DOM tree
            var div=document.createElement('div');
            div.setAttribute('class','row');
            div.setAttribute('id',socketId);
            var childDiv1=document.createElement('div');
            childDiv1.setAttribute('class','col-md-12 col-sm-12');
            var childLabel1=document.createElement('label');
            var textNode=document.createTextNode('ID : '+socketId);
            childLabel1.appendChild(textNode);
            childDiv1.appendChild(childLabel1);
            var childDiv2=document.createElement('div');
            childDiv2.setAttribute('class','col-md-12 col-sm-12');
            var childVideo=document.createElement('video');
            childVideo.setAttribute('autoplay','autoplay');
            childVideo.setAttribute('id','video_'+socketId);
            childDiv2.appendChild(childVideo);
            div.appendChild(childDiv1);
            div.appendChild(childDiv2);
            document.getElementById('container').appendChild(div);
        }

        function RemoveNodeBySocketId(sid)
        {
            var parent = document.getElementById('container');
            var child = document.getElementById(sid);
            if(parent!='Undefined' && child!='Undefined')
            {
                parent.removeChild(child);
                console.log('Remove Peer node success, socketID : '+sid);
            }
            else
            {
                console.log('Remove Peer node error, socketID : '+sid);
            }
        }

        function SendOffer(sid)
        {
            var pc=GetRTCPeerConnectionBySocketId(sid);
            //Start to create offer
            pc.createOffer(function(description){
                var message={type:'offer',from:socketid,to:sid,data:description};
                pc.setLocalDescription(description);
                send(message);
                console.log('[createOffer success] from : '+message.from+' to :'+message.to);
            },function(error){
                console.log('[createOffer error] : '+error);
            });
        }

        function GetRTCPeerConnectionBySocketId(socketId)
        {
            for(var i in list)
            {
                if(list[i].id===socketId)
                {
                    return list[i].connection;
                }
            }
        }

        function send(message)
        {
            socket.emit('_message',message);
        }

        function Traversal()
        {
            console.log('Current Clients :\n');
            for(var i in list)
            {
                if(typeof(list[i].id)!='undefined')
                {
                    console.log('ID='+list[i].id);
                }

            }
        }

        //Let's go here
        getUserMedia({video:true,audio:true},function(stream){
            attachMediaStream(document.getElementById('localVideo'),stream);
            localStream=stream;
            socket.emit('_join',room);
        },function(error){
            alert('Initialize local stream failed: '+error);
        });
